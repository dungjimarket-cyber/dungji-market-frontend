'use client';

import { useEffect, useState } from 'react';
import { useRouter } from 'next/navigation';
import { useSession } from 'next-auth/react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import {
  Form,
  FormControl,
  FormField,
  FormItem,
  FormLabel,
  FormMessage,
} from '@/components/ui/form';
import {
  Select,
  SelectContent,
  SelectItem,
  SelectTrigger,
  SelectValue,
} from '@/components/ui/select';
import { Input } from '@/components/ui/input';
import { useForm } from 'react-hook-form';
import { zodResolver } from '@hookform/resolvers/zod';
import * as z from 'zod';
import apiClient from '@/lib/axios';

interface Product {
  id: number;
  name: string;
  base_price: number;
  category_name: string;
}

const formSchema = z.object({
  product: z.string(),
  max_participants: z.string().min(1, '최대 참여 인원을 입력해주세요'),
  end_time: z.string().min(1, '마감일시를 입력해주세요'),
  min_participants: z.string().min(1, '최소 참여 인원을 입력해주세요'),
});

const tomorrow = new Date();
tomorrow.setDate(tomorrow.getDate() + 1);
const tomorrowStr = tomorrow.toISOString().slice(0, 16);

export default function CreateForm() {
  const { data: session, status } = useSession();
  const router = useRouter();
  const [products, setProducts] = useState<Product[]>([]);
  const [loading, setLoading] = useState(true);

  const form = useForm<z.infer<typeof formSchema>>({
    resolver: zodResolver(formSchema),
    defaultValues: {
      product: '',
      max_participants: '5',
      end_time: tomorrowStr,
      min_participants: '2',
    },
  });

  useEffect(() => {
    if (status === 'unauthenticated') {
      router.push('/login');
    }
  }, [status, router]);

  useEffect(() => {
    const fetchProducts = async () => {
      try {
        const response = await apiClient.get('http://localhost:8000/api/products/');
        setProducts(response.data);
      } catch (error) {
        console.error('Failed to fetch products:', error);
      } finally {
        setLoading(false);
      }
    };

    fetchProducts();
  }, []);

  const onSubmit = async (values: z.infer<typeof formSchema>) => {
    try {
      const response = await apiClient.post('http://localhost:8000/api/groupbuys/', {
        product: parseInt(values.product),
        max_participants: parseInt(values.max_participants),
        min_participants: parseInt(values.min_participants),
        end_time: values.end_time,
      });
      console.log('Group buy created:', response.data);
      router.push('/group-purchases');
    } catch (error) {
      console.error('Failed to create group purchase:', error);
    }
  };

  if (status === 'loading' || loading) {
    return (
      <div className="animate-pulse space-y-4">
        <div className="h-8 bg-gray-200 rounded w-1/3"></div>
        <div className="h-96 bg-gray-200 rounded"></div>
      </div>
    );
  }

  return (
    <Card>
      <CardHeader>
        <CardTitle>공구 등록하기</CardTitle>
      </CardHeader>
      <CardContent>
        <Form {...form}>
          <form onSubmit={form.handleSubmit(onSubmit)} className="space-y-6">
            <FormField
              control={form.control}
              name="product"
              render={({ field }) => (
                <FormItem>
                  <FormLabel>상품 선택</FormLabel>
                  <Select 
                    onValueChange={field.onChange} 
                    value={field.value}
                    defaultValue={field.value}
                  >
                    <FormControl>
                      <SelectTrigger>
                        <SelectValue placeholder="상품을 선택하세요" />
                      </SelectTrigger>
                    </FormControl>
                    <SelectContent>
                      {products.map((product) => (
                        <SelectItem key={product.id} value={product.id.toString()}>
                          {product.name} - {product.base_price.toLocaleString()}원
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="min_participants"
              render={({ field: { value, onChange, ...field } }) => (
                <FormItem>
                  <FormLabel>최소 참여 인원</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="2"
                      placeholder="최소 2명 이상"
                      value={value}
                      onChange={onChange}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="max_participants"
              render={({ field: { value, onChange, ...field } }) => (
                <FormItem>
                  <FormLabel>최대 참여 인원</FormLabel>
                  <FormControl>
                    <Input
                      type="number"
                      min="2"
                      placeholder="최소 2명 이상"
                      value={value}
                      onChange={onChange}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <FormField
              control={form.control}
              name="end_time"
              render={({ field: { value, onChange, ...field } }) => (
                <FormItem>
                  <FormLabel>모집 마감일시</FormLabel>
                  <FormControl>
                    <Input 
                      type="datetime-local" 
                      value={value}
                      onChange={onChange}
                      {...field}
                    />
                  </FormControl>
                  <FormMessage />
                </FormItem>
              )}
            />

            <Button type="submit" className="w-full">
              공구 등록하기
            </Button>
          </form>
        </Form>
      </CardContent>
    </Card>
  );
}
